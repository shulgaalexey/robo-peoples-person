[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "robo-peoples-person"
version = "0.1.0"
description = "AI Agent that cares about social interactions"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Alexey Shulga", email = "shulgaalexey@users.noreply.github.com" },
]
keywords = ["ai", "agent", "social", "pydantic", "python"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "pydantic>=2.5.0",
    "pydantic-ai>=0.0.1",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.26.0",
    "asyncio>=3.4.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.8.0",
    "ruff>=0.1.8",
    "black>=23.12.0",
    "pre-commit>=3.6.0",
]

email = [
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.0.0",
]

search = [
    "brave-search>=0.3.0",
]

social = [
    "tweepy>=4.14.0",
    "discord.py>=2.3.0",
]

all = [
    "robo-peoples-person[dev,email,search,social]",
]

[project.urls]
Homepage = "https://github.com/shulgaalexey/robo-peoples-person"
Documentation = "https://github.com/shulgaalexey/robo-peoples-person#readme"
Repository = "https://github.com/shulgaalexey/robo-peoples-person"
Issues = "https://github.com/shulgaalexey/robo-peoples-person/issues"

[project.scripts]
robo-peoples-person = "robo_peoples_person.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/robo_peoples_person"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/prompts",
    "/docs",
    "README.md",
    "PLANNING.md",
    "TASK.md",
    "CLAUDE.md",
    ".env.example",
]

# =============================================================================
# DEVELOPMENT TOOLS CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "async_test: marks tests as async tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex (cyclomatic complexity)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["robo_peoples_person"]
known-third-party = ["pydantic", "pydantic_ai", "httpx"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
